@model _21BITV03_Nhom04_website_clothes.Models.FilterViewModel

@{
    ViewData["Title"] = "Filter Products by Color, Size, and Price";
    Layout = "~/Views/Shared/_Layout_LoginAndRegister.cshtml";
}

<div class="container-fluid page-header-login py-5">
    <h1 class="text-center text-white display-6">Trang tìm kiếm</h1>
    <ol class="breadcrumb justify-content-center mb-0">
        <li class="breadcrumb-item"><a href="#">Trang chủ</a></li>
        <li class="breadcrumb-item">Trang tìm kiếm</li>
    </ol>
</div>

<div class="container-fluid fruite py-5">
    <div class="container py-5">
        <div class="row g-4">
            <div class="col-lg-3">
                <form asp-action="FilterColor_Size" method="get">
                    <!-- Filters Section -->
                    <div class="row g-4">
                        <div class="col-lg-12">
                            <div class="mb-3">
                                <h4>Select Colors:</h4>
                                @foreach (var color in Model.AvailableColors)
                                {
                                    <div class="mb-2">
                                        <input type="checkbox" class="me-2" id="color-@color.ColorId" name="colorIds" value="@color.ColorId" @(Model.SelectedColorIds.Contains(color.ColorId) ? "checked" : "") />
                                        <label for="color-@color.ColorId">@color.ColorName</label>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="col-lg-12">
                            <div class="mb-3">
                                <h4>Select Sizes:</h4>
                                @foreach (var size in Model.AvailableSizes)
                                {
                                    <div class="mb-2">
                                        <input type="checkbox" class="me-2" id="size-@size.ProductSizeId" name="sizeIds" value="@size.ProductSizeId" @(Model.SelectedSizeIds.Contains(size.ProductSizeId) ? "checked" : "") />
                                        <label for="size-@size.ProductSizeId">@size.SizeName</label>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="col-lg-12">
                            <div class="mb-3">
                                <h4>Price Range</h4>
                                <input type="range" class="form-range" id="minPriceRange" min="0" max="500000" value="0" step="1">
                                <input type="range" class="form-range" id="maxPriceRange" min="0" max="500000" value="500000" step="1">
                                <div class="d-flex justify-content-between">
                                    <span>Min Price: $<span id="minPriceDisplay">0</span></span>
                                    <span>Max Price: $<span id="maxPriceDisplay">50000</span></span>
                                </div>
                                <input type="hidden" name="minPrice" id="minPriceInput" value="0">
                                <input type="hidden" name="maxPrice" id="maxPriceInput" value="500000">
                            </div>
                        </div>

                        <button type="submit" class="btn btn-primary">Filter</button>
                    </div>
                </form>
            </div>

            <div class="col-lg-9">
                <!-- Filtered Products Display -->
                @if (Model.FilteredProducts != null && Model.FilteredProducts.Any())
                {
                    <div class="row g-4 justify-content-center">
                        @foreach (var product in Model.FilteredProducts)
                        {
                            <div class="col-md-6 col-lg-4">
                                <a href="@Url.Action("ProductDetail", "ThuNghiem", new { id = product.ProductId })" class="text-decoration-none text-dark">
                                    <div class="card mb-3">
                                        <div class="product-img">
                                            <img src="@(product.SubProducts.FirstOrDefault()?.Linkimage ?? "placeholder.jpg")" class="img-fluid w-100 rounded-top" alt="@product.ProductName" style="height: 200px;">
                                        </div>
                                        <div class="p-4 border border-secondary border-top-0 rounded-bottom">
                                            <h4 style="text-align:center">@product.ProductName</h4>
                                            <div class="d-flex justify-content-center">
                                                <p class="text-dark fs-5 fw-bold mb-0"><strong> </strong>@product.SubProducts.FirstOrDefault()?.DiscountedPrice.Value.ToString("N0")</p>
                                            </div>
                                            <div class="d-flex justify-content-center">
                                                <a href="@Url.Action("ProductDetail", "ThuNghiem", new { id = product.ProductId })" class="btn border border-secondary rounded-pill px-3 text-primary">
                                                    <i class="fa fa-shopping-bag me-2 text-primary"></i> Add to cart
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </a>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p>No products match the selected criteria.</p>
                }

                <div class="col-12">
                    <div class="pagination d-flex justify-content-center mt-5" id="pagination">
                        <!-- Pagination links will be dynamically generated here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const minPriceRange = document.getElementById('minPriceRange');
    const maxPriceRange = document.getElementById('maxPriceRange');
    const minPriceDisplay = document.getElementById('minPriceDisplay');
    const maxPriceDisplay = document.getElementById('maxPriceDisplay');
    const minPriceInput = document.getElementById('minPriceInput');
    const maxPriceInput = document.getElementById('maxPriceInput');

    function updatePriceLabels() {
        minPriceDisplay.textContent = minPriceRange.value;
        maxPriceDisplay.textContent = maxPriceRange.value;
        minPriceInput.value = minPriceRange.value;
        maxPriceInput.value = maxPriceRange.value;
    }

    minPriceRange.addEventListener('input', updatePriceLabels);
    maxPriceRange.addEventListener('input', updatePriceLabels);

    // Initialize price labels
    updatePriceLabels();

    document.addEventListener("DOMContentLoaded", function () {
        const totalPages = @Model.TotalPages; // Ensure TotalPages is part of the model
        const currentPage = @Model.PageNumber; // Ensure PageNumber is part of the model

        function createPagination() {
            const paginationElement = document.getElementById('pagination');
            paginationElement.innerHTML = ''; // Clear existing pagination

            // Previous button
            if (currentPage > 1) {
                const prevButton = document.createElement('a');
                prevButton.href = '#';
                prevButton.className = 'btn btn-secondary mx-1';
                prevButton.textContent = 'Previous';
                prevButton.onclick = () => changePage(currentPage - 1);
                paginationElement.appendChild(prevButton);
            }

            // Page numbers
            for (let i = 1; i <= totalPages; i++) {
                const pageButton = document.createElement('a');
                pageButton.href = '#';
                pageButton.className = 'btn btn-secondary mx-1' + (i === currentPage ? ' active' : '');
                pageButton.textContent = i;
                pageButton.onclick = () => changePage(i);
                paginationElement.appendChild(pageButton);
            }

            // Next button
            if (currentPage < totalPages) {
                const nextButton = document.createElement('a');
                nextButton.href = '#';
                nextButton.className = 'btn btn-secondary mx-1';
                nextButton.textContent = 'Next';
                nextButton.onclick = () => changePage(currentPage + 1);
                paginationElement.appendChild(nextButton);
            }
        }

        function changePage(pageNumber) {
            const form = document.createElement('form');
            form.method = 'get'; // Ensure method matches your filtering form
            form.action = '@Url.Action("FilterColor_Size", "Search")'; // Adjust action to your controller method

            const pageInput = document.createElement('input');
            pageInput.type = 'hidden';
            pageInput.name = 'PageNumber';
            pageInput.value = pageNumber;
            form.appendChild(pageInput);

            document.body.appendChild(form);
            form.submit();
        }

        createPagination();
    });
</script>
